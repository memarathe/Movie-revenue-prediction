# -*- coding: utf-8 -*-
"""OMDB Scrapping Script

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oFCovKJXhpEq05lSlwNAeC-YHBMKBsXp
"""

from bs4 import BeautifulSoup
import requests
import random, openpyxl
import time
from google.colab import drive

response = requests.get("http://www.omdbapi.com/?i=tt0499549&apikey=132fe706")
print(response.json())

drive.mount('/content/drive/')

import requests
import pandas as pd

# Your API key (replace 'YOUR_API_KEY' with your actual API key)
API_KEY = ['e9430949','38514c94','7a881806','e1ef3154','132fe706']

# Base URL of the OMDb API
BASE_URL = "http://www.omdbapi.com/"

# Load your existing dataset
#df = pd.read_excel('movies.xlsx')
df = pd.read_excel('/content/drive/MyDrive/imdb_movies_revenue_2004-2022.xlsx')

# Add new columns to the DataFrame for additional API data and separate ratings columns
df['Year'] = ''
df['Rated'] = ''
df['Released'] = ''
df['Runtime'] = ''
df['Genre'] = ''
df['Director'] = ''
df['Writer'] = ''
df['Actors'] = ''
df['Plot'] = ''
df['Language'] = ''
df['Country'] = ''
df['Awards'] = ''
df['Metascore'] = ''
df['imdbRating'] = ''
df['imdbVotes'] = ''
df['imdbID'] = ''
df['Type'] = ''
df['DVD'] = ''
df['Production'] = ''
df['Website'] = ''
df['IMDb Rating'] = ''
df['Rotten Tomatoes Rating'] = ''
df['Metacritic Rating'] = ''

# Counter to keep track of API requests
api_requests_count = 0
index_api_key = 0
# Fetch additional data from OMDb API
for index, row in df.iterrows():
    print(len(API_KEY))
    if api_requests_count >= 1000 and index_api_key < len(API_KEY):
        index_api_key += 1
        api_requests_count = 1
    # Prepare the request
    params = {
        't': row['Movie_Name'],
        'apikey': API_KEY[index_api_key]
    }

    # Send the request and increment the request counter
    response = requests.get(BASE_URL, params=params)
    api_requests_count += 1
    print("response code:- ", response.status_code)

    if response.status_code == 200:
        data = response.json()
        print("Movie_Number:- ", index, "\n")
        print("data:- ", data)
        if data['Response'] == 'True':
            # Update DataFrame with additional data individually
            df.at[index, 'Year'] = data.get('Year', '')
            df.at[index, 'Rated'] = data.get('Rated', '')
            df.at[index, 'Released'] = data.get('Released', '')
            df.at[index, 'Runtime'] = data.get('Runtime', '')
            df.at[index, 'Genre'] = data.get('Genre', '')
            df.at[index, 'Director'] = data.get('Director', '')
            df.at[index, 'Writer'] = data.get('Writer', '')
            df.at[index, 'Actors'] = data.get('Actors', '')
            df.at[index, 'Plot'] = data.get('Plot', '')
            df.at[index, 'Language'] = data.get('Language', '')
            df.at[index, 'Country'] = data.get('Country', '')
            df.at[index, 'Awards'] = data.get('Awards', '')
            df.at[index, 'Metascore'] = data.get('Metascore', '')
            df.at[index, 'imdbRating'] = data.get('imdbRating', '')
            df.at[index, 'imdbVotes'] = data.get('imdbVotes', '')
            df.at[index, 'imdbID'] = data.get('imdbID', '')
            df.at[index, 'Type'] = data.get('Type', '')
            df.at[index, 'DVD'] = data.get('DVD', '')
            df.at[index, 'Production'] = data.get('Production', '')
            df.at[index, 'Website'] = data.get('Website', '')

            # Handle Ratings specifically
            for rating in data.get('Ratings', []):
                if rating['Source'] == 'Internet Movie Database':
                    df.at[index, 'IMDb Rating'] = rating['Value']
                elif rating['Source'] == 'Rotten Tomatoes':
                    df.at[index, 'Rotten Tomatoes Rating'] = rating['Value']
                elif rating['Source'] == 'Metacritic':
                    df.at[index, 'Metacritic Rating'] = rating['Value']

        else:
            print(f"Error retrieving data for {row['Movie_Name']}: {data['Error']}")
            continue
    else:
        print(f"Failed to fetch data for {row['Movie_Name']}. HTTP Status Code: {response.status_code}")
        continue

# Save the enriched DataFrame to an Excel file
df.to_excel('enriched_movies.xlsx', index=False)

print(f"Data successfully written to 'enriched_movies.xlsx'. Total API calls made: {api_requests_count}")